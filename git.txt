版本回退：
	1.git add之前的回退
		1.1 git checkout -- 文件名【可以用来丢弃指定文件工作区的修改】
	
	2.git add之后的回退
		2.1 git reset【将git add的文件恢复到未add之前，运行此命令之后问题转化为1的问题】
		2.2 git checkout -- 文件名
		
	3.git commit之后的回退
		3.1 git log --pretty=oneline【git reflog可以查之前的命令记录】
		3.2 git reset --hard 版本号
	

添加远程库：
	1.初始化git目录
		1.1 找一个目录git init
		1.2 git remote add origin git地址
		1.3 第一次push，git push -u origin master

克隆远程库
	1. git clone git地址
		
		
分支管理：分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
	1.创建一个名字叫dev的分支
		1.1 git checkout -b dev
		1.2 -b参数表示创建并切换，相当于以下两条命令：
			1.2.1 git branch dev
			1.2.2 git checkout dev
			
	2.查看分支
		2.1 git branch
		2.2 此命令可以列出所有分支
		2.3 当前分支前面会有一个*号
	
	3.切换分支
		3.1 git checkout 分支名称
		3.2 切换回主分支：git checkout master
		3.3 分支来回切换，不同的文件会时而消失，时而出现
	
	4.合并分支
		4.1 git merge 分支名称【当有两边文件删除时，以被合并的分支为主，所以的不一致，以被合并的分支为主】
		4.2 此命令的作用合并指定分支到当前分支，所以一定要清楚自己的当前分支是什么
		4.3 合并分支时如果遇到冲突，git会自动帮你合并，然后再不一样的地方用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，手动更改后，再提交。
		4.4 上述命令，合并这一个过程，并没有commit，导致如果删掉分支，因为没有commit，导致无法版本回退，所以用git merge --no-ff -m "commit的文字描述" 分支名称
	
	5.删除分支
		5.1 git branch -d 分支名称
		5.2 git branch -D 分支名称，此命令用于强制删除分支，因为当分支未合并时，用上面命令是不允许被删除的
	
	6.查询当前对应的分支
		6.1 git remote
		6.2 git remote -v，显示详细信息，有两个，分为fetch(抓取)和push(推送)
	
	7.推送分支
		7.1 git push origin master
		7.2 git push origin dev
	
	8.其他人帮忙修改你的分支
		8.1 默认情况下，别人看不到自己创建的分支
		8.2 git checkout -b dev origin/分支名称，这样才可以关联到此分支
		8.3 多台电脑下，可能会出现冲突问题，解决方案：
			8.3.1 直接git pull会出错，因为本地此分支和远程分支的链接关系没有创建，要执行下面命令
			8.3.2 git branch --set-upstream 分支名称 origin/分支名称
			8.3.3 git pull

		
隐藏工作现场
	1.git stash，此命令作用是把当前工作现场“储藏”起来，等以后恢复现场后继续工作
	2.git stash list，此命令用来查看隐藏的列表
	3.恢复工作现场：
		3.1 git stash apply，此命令恢复后，不会删除stash内容，需要手动git stash drop
		3.2 git stash pop，此命令会直接删除stash内容
		3.3 git stash apply stash@{0}，恢复到指定stash内容
		3.4 git stash drop stash@{0}

添加标签
	1.为当前版本创建标签v1.0 git tag v1.0
	2.为以往版本创建标签v0.9 git tag v0.9 版本号【版本号就是版本回退时用到的版本号】
	3.为以往版本创建带说明的标签 git tag -a v0.1 -m "version 0.1 released" 版本号
	4.查看当前标签 git tag
	5.查看标签对应的版本号等信息 git show v0.9
	6.删除标签 git tag -d v0.1【删除的是本地tag，如果要删除远程tag，还要多一个步骤，git push origin :refs/tags/v0.9，删除远程tag v0.9】
	7.推送指定标签到远程 git push origin v1.0
	8.推送全部标签到远程 git push origin --tags
	
	
忽略指定格式文件
	1.添加一个.gitignore文件，放在想要忽略的地方，会作用于当前文件夹以及当前文件夹的子文件夹。
	2.在文件里输入不想要上传的文件，比如：Thumbs.db，*.py[cod]，*.egg等等
	3.强制添加某个会被忽略的文件 git add -f 文件名称
	4.检查符合此文件名的规则 git check-ignore -v 文件名称